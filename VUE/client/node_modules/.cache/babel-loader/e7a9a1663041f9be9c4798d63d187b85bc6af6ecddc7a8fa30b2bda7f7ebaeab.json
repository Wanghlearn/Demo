{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" 具备一个宽高的dom \"), _createElementVNode(\"div\", {\n    ref: \"main\",\n    style: {\n      \"height\": \"600px\",\n      \"width\": \"100%\",\n      \"margin\": \"0\",\n      \"padding\": \"0\",\n      \"overflow\": \"hidden\"\n    },\n    onDblclick: _cache[0] || (_cache[0] = (...args) => $options.revertMap && $options.revertMap(...args))\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */)], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":{"version":3,"names":["_createCommentVNode","_createElementVNode","ref","style","onDblclick","_cache","args","$options","revertMap"],"sources":["E:\\VUE\\frontend\\src\\components\\ChinaMap.vue"],"sourcesContent":["<template>\r\n  <!-- 具备一个宽高的dom -->\r\n  <div ref=\"main\" style=\"height: 600px ;width: 100%;margin: 0;padding: 0;overflow: hidden\" @dblclick=\"revertMap\"></div>\r\n</template>\r\n\r\n<script>\r\n// 导入echarts\r\nimport * as echarts from 'echarts';\r\n// 中国地图\r\nimport chianJson from '@/map/china.json'\r\n// 导入echarts主题\r\nrequire('@/theme/dark')\r\n// axios\r\nimport axios from 'axios'\r\n// 各省份对应的矢量数据地址\r\nimport {getProvinceMapInfo} from '@/utils/map-utils'\r\nexport default {\r\n  name: \"china-map\",\r\n  data() {\r\n    return {\r\n      chart: ''\r\n    }\r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      this.initChart()\r\n      window.addEventListener('resize', this.screenAdapter)\r\n      this.screenAdapter()\r\n    })\r\n\r\n  },\r\n  methods: {\r\n    initChart() {\r\n      // init第一个参数 ref定义的的，第二个参数主题\r\n      this.chart = echarts.init(this.$refs.main, 'chalk')\r\n      echarts.registerMap(\"chain\", chianJson)\r\n      this.chart.setOption({\r\n        geo: {\r\n          type: 'map', // 类型\r\n          map: 'chain',\r\n          top: '5%', // 距离顶部\r\n          bottom: '5%', // 距离底部\r\n          itemStyle: { // 地图区域的样式。\r\n            areaColor: '#2E72BF', // 地图整体区域的颜色\r\n            borderColor: '#333', //地图边界线的颜色\r\n          },\r\n        },\r\n        // 自定义提示框的内容\r\n        tooltip: {\r\n          trigger: 'item',\r\n          // 自定义提示框的内容\r\n          formatter(params) {\r\n            return (\r\n              \"<div>\" +\r\n              params.data.name +\r\n              \" <br> \" +\r\n              params.seriesName +\r\n              \"</div>\"\r\n            );\r\n          }\r\n        },\r\n        // 散点图\r\n        series: [\r\n          {\r\n            type: 'effectScatter',  //特效散点图\r\n            rippleEffect: { // 涟漪效果\r\n              scale: 5,\r\n              brushType: 'stroke'\r\n            },\r\n            coordinateSystem: 'geo', // 使用坐标\r\n            name: \"一线城市\",\r\n            data: [\r\n              {name: \"北京\", value: [116.46, 39.92]},\r\n              {name: \"上海\", value: [121.48, 31.22]},\r\n              {name: \"广州\", value: [113.23, 23.16]},\r\n              {name: \"深圳\", value: [114.07, 22.62]},\r\n            ]\r\n          },\r\n          {\r\n            type: 'effectScatter',  //特效散点图\r\n            rippleEffect: { // 涟漪效果\r\n              scale: 5,\r\n              brushType: 'stroke'\r\n            },\r\n            coordinateSystem: 'geo', // 使用坐标\r\n            name: \"二线城市\",\r\n            data: [\r\n              {name: \"南京\", value: [118.78, 32.04]},\r\n              {name: \"杭州\", value: [120.19, 30.26]},\r\n              {name: \"成都\", value: [104.06, 30.67]},\r\n              {name: \"武汉\", value: [114.31, 30.52]},\r\n            ]\r\n          },\r\n          {\r\n            type: 'effectScatter',  //特效散点图\r\n            rippleEffect: { // 涟漪效果\r\n              scale: 5,\r\n              brushType: 'stroke'\r\n            },\r\n            coordinateSystem: 'geo', // 使用坐标\r\n            name: \"三线城市\",\r\n            data: [\r\n              {name: \"拉萨\", value: [91.11, 29.97]},\r\n              {name: \"乌鲁木齐\", value: [87.68, 43.77]},\r\n              {name: \"西宁\", value: [101.74, 36.56]},\r\n              {name: \"兰州\", value: [103.73, 36.03]},\r\n            ]\r\n          },\r\n        ],\r\n        \r\n      })\r\n      this.chart.on('click', async arg =>{\r\n        const provinceInfo = getProvinceMapInfo(arg.name)\r\n        console.log(\"provinceInfo\",provinceInfo)\r\n        // 如果存在key执行下面内容\r\n        if(provinceInfo.key !== undefined){\r\n          // 获取static下面的json数据\r\n          const res = await axios.get(\"http://localhost:9528\" + provinceInfo.path)\r\n          echarts.registerMap(provinceInfo.key, res.data)\r\n          const changeOption={\r\n            geo:{\r\n              map: provinceInfo.key\r\n            }\r\n          }\r\n          this.chart.setOption(changeOption)\r\n        }\r\n      })\r\n\r\n    },\r\n    // 当浏览器的大小发生变化的时候，会调用此方法来完成适配\r\n    screenAdapter() {\r\n      // 获取自适应大小\r\n      const titleFontSize = this.$refs.main.offsetWidth / 100 * 3.6\r\n      console.log(\"titleFontSize\", titleFontSize)\r\n      // 自适应配置\r\n      const adapterOption = {\r\n        title: {\r\n          textStyle: {\r\n            fontSize: titleFontSize // 自适应字体大小\r\n          }\r\n        },\r\n        legend: { // 图例组件\r\n          itemWidth: titleFontSize / 2,\r\n          itemHeight: titleFontSize / 2,\r\n          itemGap: titleFontSize / 2,\r\n          textStyle: {\r\n            fontSize: titleFontSize / 2 // 自适应字体大小\r\n          }\r\n        },\r\n      }\r\n      this.chart.setOption(adapterOption)\r\n      // 自适应\r\n      this.chart.resize()\r\n    },\r\n    // 回退\r\n    revertMap(){\r\n      const revertOption={\r\n        geo:{\r\n          map: 'chain'\r\n        }\r\n      }\r\n      this.chart.setOption(revertOption)\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.dashboard-container{\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n</style>\r\n\r\n"],"mappings":";;6DACEA,mBAAA,gBAAmB,EACnBC,mBAAA,CAAqH;IAAhHC,GAAG,EAAC,MAAM;IAACC,KAAwE,EAAxE;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA,CAAwE;IAAEC,UAAQ,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,SAAA,IAAAD,QAAA,CAAAC,SAAA,IAAAF,IAAA,CAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}
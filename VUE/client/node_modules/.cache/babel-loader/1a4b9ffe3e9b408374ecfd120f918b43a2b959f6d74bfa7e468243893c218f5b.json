{"ast":null,"code":"// 导入echarts\nimport * as echarts from 'echarts';\n// 中国地图\nimport chianJson from '@/map/china.json';\n// 导入echarts主题\nrequire('@/theme/chalk');\n// axios\nimport axios from 'axios';\n// 各省份对应的矢量数据地址\nimport { getProvinceMapInfo } from '@/utils/map-utils';\nexport default {\n  name: \"china-map\",\n  data() {\n    return {\n      chart: ''\n    };\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.initChart();\n      window.addEventListener('resize', this.screenAdapter);\n      this.screenAdapter();\n    });\n  },\n  methods: {\n    initChart() {\n      // init第一个参数 ref定义的的，第二个参数主题\n      this.chart = echarts.init(this.$refs.main, 'chalk');\n      echarts.registerMap(\"chain\", chianJson);\n      this.chart.setOption({\n        title: {\n          text: '中国地图',\n          left: 20,\n          top: 20\n        },\n        geo: {\n          type: 'map',\n          // 类型\n          map: 'chain',\n          top: '5%',\n          // 距离顶部\n          bottom: '5%',\n          // 距离底部\n          itemStyle: {\n            // 地图区域的样式。\n            areaColor: '#2E72BF',\n            // 地图整体区域的颜色\n            borderColor: '#333' //地图边界线的颜色\n          }\n        },\n\n        // 自定义提示框的内容\n        tooltip: {\n          trigger: 'item',\n          // 自定义提示框的内容\n          formatter(params) {\n            return \"<div>\" + params.data.name + \" <br> \" + params.seriesName + \"</div>\";\n          }\n        },\n        // 散点图\n        series: [{\n          type: 'effectScatter',\n          //特效散点图\n          rippleEffect: {\n            // 涟漪效果\n            scale: 5,\n            brushType: 'stroke'\n          },\n          coordinateSystem: 'geo',\n          // 使用坐标\n          name: \"一线城市\",\n          data: [{\n            name: \"北京\",\n            value: [116.46, 39.92]\n          }, {\n            name: \"上海\",\n            value: [121.48, 31.22]\n          }, {\n            name: \"广州\",\n            value: [113.23, 23.16]\n          }, {\n            name: \"深圳\",\n            value: [114.07, 22.62]\n          }]\n        }, {\n          type: 'effectScatter',\n          //特效散点图\n          rippleEffect: {\n            // 涟漪效果\n            scale: 5,\n            brushType: 'stroke'\n          },\n          coordinateSystem: 'geo',\n          // 使用坐标\n          name: \"二线城市\",\n          data: [{\n            name: \"南京\",\n            value: [118.78, 32.04]\n          }, {\n            name: \"杭州\",\n            value: [120.19, 30.26]\n          }, {\n            name: \"成都\",\n            value: [104.06, 30.67]\n          }, {\n            name: \"武汉\",\n            value: [114.31, 30.52]\n          }]\n        }, {\n          type: 'effectScatter',\n          //特效散点图\n          rippleEffect: {\n            // 涟漪效果\n            scale: 5,\n            brushType: 'stroke'\n          },\n          coordinateSystem: 'geo',\n          // 使用坐标\n          name: \"三线城市\",\n          data: [{\n            name: \"拉萨\",\n            value: [91.11, 29.97]\n          }, {\n            name: \"乌鲁木齐\",\n            value: [87.68, 43.77]\n          }, {\n            name: \"西宁\",\n            value: [101.74, 36.56]\n          }, {\n            name: \"兰州\",\n            value: [103.73, 36.03]\n          }]\n        }],\n        legend: {\n          // 图例组件\n          left: '5%',\n          bottom: '5%',\n          orient: 'vertical',\n          // 竖着排列\n          data: ['一线城市', '二线城市', '三线城市']\n        }\n      });\n      this.chart.on('click', async arg => {\n        const provinceInfo = getProvinceMapInfo(arg.name);\n        console.log(\"provinceInfo\", provinceInfo);\n        // 如果存在key执行下面内容\n        if (provinceInfo.key !== undefined) {\n          // 获取static下面的json数据\n          const res = await axios.get(\"http://localhost:9528\" + provinceInfo.path);\n          echarts.registerMap(provinceInfo.key, res.data);\n          const changeOption = {\n            geo: {\n              map: provinceInfo.key\n            }\n          };\n          this.chart.setOption(changeOption);\n        }\n      });\n    },\n    // 当浏览器的大小发生变化的时候，会调用此方法来完成适配\n    screenAdapter() {\n      // 获取自适应大小\n      const titleFontSize = this.$refs.main.offsetWidth / 100 * 3.6;\n      console.log(\"titleFontSize\", titleFontSize);\n      // 自适应配置\n      const adapterOption = {\n        title: {\n          textStyle: {\n            fontSize: titleFontSize // 自适应字体大小\n          }\n        },\n\n        legend: {\n          // 图例组件\n          itemWidth: titleFontSize / 2,\n          itemHeight: titleFontSize / 2,\n          itemGap: titleFontSize / 2,\n          textStyle: {\n            fontSize: titleFontSize / 2 // 自适应字体大小\n          }\n        }\n      };\n\n      this.chart.setOption(adapterOption);\n      // 自适应\n      this.chart.resize();\n    },\n    // 回退\n    revertMap() {\n      const revertOption = {\n        geo: {\n          map: 'chain'\n        }\n      };\n      this.chart.setOption(revertOption);\n    }\n  }\n};","map":{"version":3,"names":["echarts","chianJson","require","axios","getProvinceMapInfo","name","data","chart","mounted","$nextTick","initChart","window","addEventListener","screenAdapter","methods","init","$refs","main","registerMap","setOption","title","text","left","top","geo","type","map","bottom","itemStyle","areaColor","borderColor","tooltip","trigger","formatter","params","seriesName","series","rippleEffect","scale","brushType","coordinateSystem","value","legend","orient","on","arg","provinceInfo","console","log","key","undefined","res","get","path","changeOption","titleFontSize","offsetWidth","adapterOption","textStyle","fontSize","itemWidth","itemHeight","itemGap","resize","revertMap","revertOption"],"sources":["E:\\VUE\\frontend\\src\\components\\ChinaMap.vue"],"sourcesContent":["<template>\r\n  <!-- 具备一个宽高的dom -->\r\n  <div ref=\"main\" style=\"height: 879px ;width: 100%;margin: 0;padding: 0;overflow: hidden\" @dblclick=\"revertMap\"></div>\r\n</template>\r\n\r\n<script>\r\n// 导入echarts\r\nimport * as echarts from 'echarts';\r\n// 中国地图\r\nimport chianJson from '@/map/china.json'\r\n// 导入echarts主题\r\nrequire('@/theme/chalk')\r\n// axios\r\nimport axios from 'axios'\r\n// 各省份对应的矢量数据地址\r\nimport {getProvinceMapInfo} from '@/utils/map-utils'\r\nexport default {\r\n  name: \"china-map\",\r\n  data() {\r\n    return {\r\n      chart: ''\r\n    }\r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      this.initChart()\r\n      window.addEventListener('resize', this.screenAdapter)\r\n      this.screenAdapter()\r\n    })\r\n\r\n  },\r\n  methods: {\r\n    initChart() {\r\n      // init第一个参数 ref定义的的，第二个参数主题\r\n      this.chart = echarts.init(this.$refs.main, 'chalk')\r\n      echarts.registerMap(\"chain\", chianJson)\r\n      this.chart.setOption({\r\n        title: {\r\n          text: '中国地图',\r\n          left: 20,\r\n          top: 20,\r\n        },\r\n        geo: {\r\n          type: 'map', // 类型\r\n          map: 'chain',\r\n          top: '5%', // 距离顶部\r\n          bottom: '5%', // 距离底部\r\n          itemStyle: { // 地图区域的样式。\r\n            areaColor: '#2E72BF', // 地图整体区域的颜色\r\n            borderColor: '#333', //地图边界线的颜色\r\n          },\r\n        },\r\n        // 自定义提示框的内容\r\n        tooltip: {\r\n          trigger: 'item',\r\n          // 自定义提示框的内容\r\n          formatter(params) {\r\n            return (\r\n              \"<div>\" +\r\n              params.data.name +\r\n              \" <br> \" +\r\n              params.seriesName +\r\n              \"</div>\"\r\n            );\r\n          }\r\n        },\r\n        // 散点图\r\n        series: [\r\n          {\r\n            type: 'effectScatter',  //特效散点图\r\n            rippleEffect: { // 涟漪效果\r\n              scale: 5,\r\n              brushType: 'stroke'\r\n            },\r\n            coordinateSystem: 'geo', // 使用坐标\r\n            name: \"一线城市\",\r\n            data: [\r\n              {name: \"北京\", value: [116.46, 39.92]},\r\n              {name: \"上海\", value: [121.48, 31.22]},\r\n              {name: \"广州\", value: [113.23, 23.16]},\r\n              {name: \"深圳\", value: [114.07, 22.62]},\r\n            ]\r\n          },\r\n          {\r\n            type: 'effectScatter',  //特效散点图\r\n            rippleEffect: { // 涟漪效果\r\n              scale: 5,\r\n              brushType: 'stroke'\r\n            },\r\n            coordinateSystem: 'geo', // 使用坐标\r\n            name: \"二线城市\",\r\n            data: [\r\n              {name: \"南京\", value: [118.78, 32.04]},\r\n              {name: \"杭州\", value: [120.19, 30.26]},\r\n              {name: \"成都\", value: [104.06, 30.67]},\r\n              {name: \"武汉\", value: [114.31, 30.52]},\r\n            ]\r\n          },\r\n          {\r\n            type: 'effectScatter',  //特效散点图\r\n            rippleEffect: { // 涟漪效果\r\n              scale: 5,\r\n              brushType: 'stroke'\r\n            },\r\n            coordinateSystem: 'geo', // 使用坐标\r\n            name: \"三线城市\",\r\n            data: [\r\n              {name: \"拉萨\", value: [91.11, 29.97]},\r\n              {name: \"乌鲁木齐\", value: [87.68, 43.77]},\r\n              {name: \"西宁\", value: [101.74, 36.56]},\r\n              {name: \"兰州\", value: [103.73, 36.03]},\r\n            ]\r\n          },\r\n        ],\r\n        legend: { // 图例组件\r\n          left: '5%',\r\n          bottom: '5%',\r\n          orient: 'vertical', // 竖着排列\r\n          data: ['一线城市', '二线城市', '三线城市']\r\n        },\r\n      })\r\n      this.chart.on('click', async arg =>{\r\n        const provinceInfo = getProvinceMapInfo(arg.name)\r\n        console.log(\"provinceInfo\",provinceInfo)\r\n        // 如果存在key执行下面内容\r\n        if(provinceInfo.key !== undefined){\r\n          // 获取static下面的json数据\r\n          const res = await axios.get(\"http://localhost:9528\" + provinceInfo.path)\r\n          echarts.registerMap(provinceInfo.key, res.data)\r\n          const changeOption={\r\n            geo:{\r\n              map: provinceInfo.key\r\n            }\r\n          }\r\n          this.chart.setOption(changeOption)\r\n        }\r\n      })\r\n\r\n    },\r\n    // 当浏览器的大小发生变化的时候，会调用此方法来完成适配\r\n    screenAdapter() {\r\n      // 获取自适应大小\r\n      const titleFontSize = this.$refs.main.offsetWidth / 100 * 3.6\r\n      console.log(\"titleFontSize\", titleFontSize)\r\n      // 自适应配置\r\n      const adapterOption = {\r\n        title: {\r\n          textStyle: {\r\n            fontSize: titleFontSize // 自适应字体大小\r\n          }\r\n        },\r\n        legend: { // 图例组件\r\n          itemWidth: titleFontSize / 2,\r\n          itemHeight: titleFontSize / 2,\r\n          itemGap: titleFontSize / 2,\r\n          textStyle: {\r\n            fontSize: titleFontSize / 2 // 自适应字体大小\r\n          }\r\n        },\r\n      }\r\n      this.chart.setOption(adapterOption)\r\n      // 自适应\r\n      this.chart.resize()\r\n    },\r\n    // 回退\r\n    revertMap(){\r\n      const revertOption={\r\n        geo:{\r\n          map: 'chain'\r\n        }\r\n      }\r\n      this.chart.setOption(revertOption)\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.dashboard-container{\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n</style>\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}